#|
RFC 4271
4.3.  UPDATE Message Format
...
a) ORIGIN (Type Code 1):

ORIGIN is a well-known mandatory attribute that defines the
origin of the path information.  The data octet can assume
the following values:

Value      Meaning

0         IGP - Network Layer Reachability Information
is interior to the originating AS

1         EGP - Network Layer Reachability Information
learned via the EGP protocol [RFC904]

2         INCOMPLETE - Network Layer Reachability
Information learned by some other means
...
5.1.1.  ORIGIN

ORIGIN is a well-known mandatory attribute.  The ORIGIN attribute is
generated by the speaker that originates the associated routing
information.  Its value SHOULD NOT be changed by any other speaker.
|#

(in-package :sbgp)

(defun ORIGIN-get-value (obj) "-> u8" (cadddr obj))

(defun ORIGIN-zhash (octet-offset obj)
    (logxor (zhash-integer u16 octet-offset (PATH-ATTRIB-get-attribute-type-field obj))
	    (zhash-integer u16 (+ 2 octet-offset) (PATH-ATTRIB-get-attribute-length obj))
	    (zhash-integer u8 (+ 4 octet-offset) (ORIGIN-get-value obj))))

(defun ORIGIN-make (attribute-type attribute-length value)
  (let ((obj (list 'ORIGIN
		   attribute-type
		   attribute-length
		   value)))
    (if *path-attrib-cache*
	(CACHE-lookup *path-attrib-cache*
		      obj
		      (ORIGIN-zhash 0 obj))
	obj)))

(defun ORIGIN-make-new (value)
  "Return ORIGIN path attribute. VALUE 0 = IGP, 1 = EGP, 2 = INCOMPLETE"
  (if (and (>= value 0) (<= value 2))
      (ORIGIN-make #x4001 1 value)
      nil))

(defun ORIGIN-valid1-p (obj)
  "Test list elements are of correct type"
  (and (consp obj)
       (= (length obj) 4)
       (u16-p (PATH-ATTRIB-get-attribute-type-field obj))
       (u16-p (PATH-ATTRIB-get-attribute-length obj))
       (u8-p (ORIGIN-get-value obj))))

(deftype ORIGIN () '(and (cons (member ORIGIN)) (satisfies ORIGIN-valid1-p)))

(defun ORIGIN-typep (obj) (typep obj 'ORIGIN))
  
(defun ORIGIN-valid2-p (obj)
  "Test list values are within allowed range"
  (and (eq 'ORIGIN (TL-get-name obj))
       (= #x4001 (logandc1 #x1000 (PATH-ATTRIB-get-attribute-type-field obj)))
       (= 1 (PATH-ATTRIB-get-attribute-length obj))
       (and (>= (ORIGIN-get-value obj) 0)
	    (<= (ORIGIN-get-value obj) 2))))

(defun ORIGIN-io-read (attribute-type attribute-length stream-in)
  (ORIGIN-make attribute-type
	       attribute-length
	       (io-read-uNbe u8 stream-in)))

(defun ORIGIN-io-write (obj stream-out)
  (destructuring-bind (attribute-type attribute-length value)
      (cdr obj)

    (io-write-uNbe u16 attribute-type stream-out)
    (io-write-uNbe (if (uN-bit-set-p u16 attribute-type 3) u16 u8)
		   attribute-length
		   stream-out)
    (io-write-uNbe u8 value stream-out)))

(defun ORIGIN-pprint-1 (port obj &optional colon? atsign?)
  (declare (ignore colon? atsign?))
  (format port "(~W #x~4,'0X #x~V,'0X #x~2,'0X)"
	  (TL-get-name obj)                            ; symbol
	  (PATH-ATTRIB-get-attribute-type-field obj)            ; u16
	  (if (PATH-ATTRIB-get-flag-extended-len-bit obj) 4 2)
	  (PATH-ATTRIB-get-attribute-length obj)                ; u8|u16
	  (ORIGIN-get-value obj)))                              ; u8
	  
(set-pprint-dispatch '(cons (member ORIGIN)) #'ORIGIN-pprint-1 0 *sbgp-pprint-dispatch-table-1*)

(defun ORIGIN-pprint-2 (port obj &optional colon? atsign?)
  (declare (ignore colon? atsign?))
  (format port "~([~W #x~4,'0X ~D~) [~W]]"
	  (TL-get-name obj)                            ; symbol
	  (PATH-ATTRIB-get-attribute-type-field obj)            ; u16
	  (PATH-ATTRIB-get-attribute-length obj)                ; u8|u16
	  (case (ORIGIN-get-value obj)
		      (0 'IGP)
		      (1 'EGP)
		      (2 'INCOMPLETE)
		      (t 'UNASSIGNED))))

(set-pprint-dispatch '(cons (member ORIGIN)) #'ORIGIN-pprint-2 0 *sbgp-pprint-dispatch-table-2*)	

(setf (get 'ORIGIN 'pprint-1) #'ORIGIN-pprint-1)
(setf (get 'ORIGIN 'pprint-2) #'ORIGIN-pprint-2)
(setf (get 'ORIGIN 'zhash) #'ORIGIN-zhash)
